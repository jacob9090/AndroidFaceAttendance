package com.fruitoftek.androidfaceattendance;

import android.Manifest;
import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.view.MenuItem;
import android.view.Menu;

import com.google.android.gms.location.CurrentLocationRequest;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.location.Priority;
import com.google.android.material.navigation.NavigationView;

import androidx.core.app.ActivityCompat;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.appcompat.app.AppCompatActivity;
import androidx.preference.PreferenceManager;
import org.apache.commons.lang3.StringUtils;

import com.fruitoftek.androidfaceattendance.databinding.ActivityMainBinding;
import com.fruitoftek.androidfaceattendance.detection.env.Logger;
import com.fruitoftek.androidfaceattendance.ui.facedetectionwrappers.DetectorActivityTest;
import com.fruitoftek.androidfaceattendance.util.Util;

public class MainActivity extends AppCompatActivity {
    private static final Logger LOGGER = new Logger();
    private static String TAG = "MainActivity";
    private AppBarConfiguration mAppBarConfiguration;
    private ActivityMainBinding binding;

    private FusedLocationProviderClient fusedLocationProviderClient;
    private static final String PERMISSION_LOCATION = Manifest.permission.ACCESS_FINE_LOCATION;
    private static final int LOCATION_PERMISSION_REQUEST = 1001;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        setSupportActionBar(binding.appBarMain.toolbar);
        DrawerLayout drawer = binding.drawerLayout;
        NavigationView navigationView = binding.navView;
        // Passing each menu ID as a set of Ids because each
        // menu should be considered as top level destinations.
        mAppBarConfiguration = new AppBarConfiguration.Builder(
                R.id.nav_home, R.id.nav_users, R.id.nav_attrecords, R.id.nav_settings)
                .setOpenableLayout(drawer)
                .build();
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);
        NavigationUI.setupWithNavController(navigationView, navController);

        // Utils
        verifyDeviceSn();

        // Trigger Foreground Services
        startForeGroundServices();

        // Request permissions
        checkLocationPermission();
    }

    @Override
    protected void onRestart() {
        super.onRestart();

        // Request permissions
        checkLocationPermission();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onSupportNavigateUp() {
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        return NavigationUI.navigateUp(navController, mAppBarConfiguration)
                || super.onSupportNavigateUp();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == R.id.action_face_recognition_test) {
            navigateToFaceRecognitionTestingActivity();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private void navigateToFaceRecognitionTestingActivity() {
        Intent intent = new Intent(getApplicationContext(), DetectorActivityTest.class);
        startActivity(intent);
    }

    private void startForeGroundServices() {

    }

    private boolean foregroundServiceRunning(Class serviceClass) {
        ActivityManager activityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
        for(ActivityManager.RunningServiceInfo service: activityManager.getRunningServices(Integer.MAX_VALUE)) {
            if (serviceClass.getName().equals(service.service.getClassName())) {
                return true;
            }
        }
        return false;
    }

    private void verifyDeviceSn() {
        // Set the deviceSn with an autogenerated value
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        String deviceSn = sharedPreferences.getString("deviceSn", "");
        if (StringUtils.isEmpty(deviceSn)) {
            LOGGER.i(TAG, "Generating new value for Device Serial Number");
            deviceSn = Util.generateNewDeviceSerialNumber();
            SharedPreferences.Editor editor = sharedPreferences.edit();
            editor.putString("deviceSn", deviceSn);
            editor.commit();
        }
    }

    private void checkLocationPermission() {
        if (checkSelfPermission(PERMISSION_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            // Request location so that it gets cached
            if (fusedLocationProviderClient == null) {
                fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);
            }
            CurrentLocationRequest locationRequest = new CurrentLocationRequest.Builder()
                    .setPriority(Priority.PRIORITY_BALANCED_POWER_ACCURACY)
                    .setMaxUpdateAgeMillis(10 * 60 * 1000) // 10 min old location
                    .build();
            LOGGER.i(TAG, "Acquiring Location");
            fusedLocationProviderClient.getCurrentLocation(locationRequest, null).addOnSuccessListener(location -> {
                String geoLocation = null;
                if (location != null) {
                    geoLocation = String.format("%.6f,%.6f", location.getLongitude(), location.getLatitude());
                }
                LOGGER.i(TAG, "Location acquired %s", geoLocation);
            });
        } else {// Request permissions
            ActivityCompat.requestPermissions(this, new String[] {PERMISSION_LOCATION}, LOCATION_PERMISSION_REQUEST);
        }
    }
}